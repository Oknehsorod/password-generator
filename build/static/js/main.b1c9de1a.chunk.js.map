{"version":3,"sources":["Header.tsx","utils.ts","App.tsx","index.tsx"],"names":["AppBar","position","Toolbar","Typography","getRandElement","array","Math","floor","random","length","App","useState","upper","numbers","specChars","state","setState","pass","setPass","handleChange","e","newState","title","target","name","console","log","checked","parseInt","value","className","Header","Grid","container","justify","TextField","FormControlLabel","control","Checkbox","onChange","color","label","type","Button","onClick","alphabet","upAlphabet","toUpperCase","variants","push","password","i","split","variant","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAGe,aACb,OACE,kBAACA,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,8BCPD,SAASC,EAAkBC,GAC9B,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SC2HnCC,MAhHf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,OAAO,EACPC,SAAS,EACTC,WAAW,EACXL,OAAQ,KALG,mBACNM,EADM,KACCC,EADD,OAQWL,mBAAS,IARpB,mBAQNM,EARM,KAQAC,EARA,KAUPC,EAAe,SAACC,GACpB,IAAMC,EAAQ,eAAQN,GAChBO,EAAQF,EAAEG,OAAOC,KAEvBC,QAAQC,IAAIJ,GACE,UAAVA,GAA+B,YAAVA,GAAiC,cAAVA,EAC9CD,EAASC,GAASF,EAAEG,OAAOI,QAE3BN,EAAQ,OAAaO,SAASR,EAAEG,OAAOM,OAGzCb,EAASK,IAiCX,OACE,yBAAKS,UAAU,OACb,kBAACC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACC,EAAA,EAAD,CAAWN,MAAOZ,IAClB,kBAACe,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACE,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEX,QAASZ,EAAMH,MACf2B,SAAUpB,EACVK,KAAK,QACLgB,MAAM,YAGVC,MAAM,gBAER,kBAACL,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEX,QAASZ,EAAMF,QACf0B,SAAUpB,EACVK,KAAK,UACLgB,MAAM,YAGVC,MAAM,aAGV,kBAACT,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACE,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEX,QAASZ,EAAMD,UACfyB,SAAUpB,EACVK,KAAK,YACLgB,MAAM,YAGVC,MAAM,uBAER,kBAACN,EAAA,EAAD,CACEO,KAAK,UACLlB,KAAK,SACLK,MAAOd,EAAMN,OACb8B,SAAUpB,MAIhB,kBAACwB,EAAA,EAAD,CAAQC,QAhFS,WACrB,IAAMC,EAAW,6BACXC,EAAaD,EAASE,cAItBC,EAAqB,CAACH,GAExB9B,EAAMH,OACRoC,EAASC,KAAKH,GAGZ/B,EAAMF,SACRmC,EAASC,KAVK,cAaZlC,EAAMD,WACRkC,EAASC,KAbO,iBAkBlB,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAGA,EAAIpC,EAAMN,OAAQ0C,GAAK,EAAG,CACxC,IAAMT,EAAOtC,EAAe4C,GAC5BE,GAAY9C,EAAesC,EAAKU,MAAM,KAGxClC,EAAQgC,IAqD6BV,MAAM,UAAUa,QAAQ,aAAzD,eChHRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b1c9de1a.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport default () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography>Password Generator</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","export function getRandElement<T>(array: Array<T>): T {\n    return array[Math.floor(Math.random() * array.length)];\n}","import React, { useState, ChangeEvent } from 'react';\nimport {\n  Grid,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Button,\n} from '@material-ui/core';\n\nimport Header from './Header';\nimport { getRandElement } from './utils';\n\nfunction App() {\n  const [state, setState] = useState({\n    upper: false,\n    numbers: false,\n    specChars: false,\n    length: 10,\n  });\n\n  const [pass, setPass] = useState('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newState = { ...state };\n    const title = e.target.name as 'upper' | 'numbers' | 'length' | 'specChars';\n\n    console.log(title);\n    if (title === 'upper' || title === 'numbers' || title === 'specChars') {\n      newState[title] = e.target.checked;\n    } else {\n      newState['length'] = parseInt(e.target.value);\n    }\n\n    setState(newState);\n  };\n\n  const handleGenerate = () => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const upAlphabet = alphabet.toUpperCase();\n    const numbers = '0123456789';\n    const specChars = '%&[]{}()=+-*/';\n\n    const variants: [string] = [alphabet];\n\n    if (state.upper) {\n      variants.push(upAlphabet);\n    }\n\n    if (state.numbers) {\n      variants.push(numbers);\n    }\n\n    if (state.specChars) {\n      variants.push(specChars);\n    }\n\n    let password = '';\n\n    for (let i = 0; i < state.length; i += 1) {\n      const type = getRandElement(variants);\n      password += getRandElement(type.split(''));\n    }\n\n    setPass(password);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Grid container justify=\"center\">\n        <TextField value={pass} />\n        <Grid container justify=\"center\">\n          <Grid container justify=\"center\">\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={state.upper}\n                  onChange={handleChange}\n                  name=\"upper\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Big letters\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={state.numbers}\n                  onChange={handleChange}\n                  name=\"numbers\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Numbers\"\n            />\n          </Grid>\n          <Grid container justify=\"center\">\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={state.specChars}\n                  onChange={handleChange}\n                  name=\"specChars\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Special Characters\"\n            />\n            <TextField\n              type=\"numbers\"\n              name=\"length\"\n              value={state.length}\n              onChange={handleChange}\n            />\n          </Grid>\n        </Grid>\n        <Button onClick={handleGenerate} color=\"primary\" variant=\"contained\">\n          Generate\n        </Button>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}